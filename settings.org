* Personal Info
#+BEGIN_SRC emacs-lisp
(setq user-full-name "Pamela Wang"
			user-mail-address "wangyeelin@gmail.com")
#+END_SRC
* Basic Settings
#+BEGIN_SRC emacs-lisp

;;; Begin initialization
;; Turn off mouse interface early in startup to avoid momentary display
(when window-system
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (tooltip-mode -1))

(fset 'yes-or-no-p 'y-or-n-p)


(setq auto-revert-interval 1            ; Refresh buffers fast
      custom-file (make-temp-file "")   ; Discard customization's
      echo-keystrokes 0.1               ; Show keystrokes asap
      inhibit-startup-message t         ; No splash screen please
      initial-scratch-message nil       ; Clean scratch buffer
      recentf-max-saved-items 100       ; Show more recent files
      ring-bell-function 'ignore        ; Quiet
      sentence-end-double-space nil)    ; No double space

;; Some mac-bindings interfere with Emacs bindings.
;;(when (boundp 'mac-pass-command-to-system)
;;  (setq mac-pass-command-to-system nil))

(setq-default fill-column 79                    ; Maximum line width
              truncate-lines t                  ; Don't fold lines
              indent-tabs-mode nil              ; Use spaces instead of tabs
              split-width-threshold 100         ; Split verticly by default
              auto-fill-function 'do-auto-fill) ; Auto-fill-mode everywhere

;;ut8-f is the preferred coding system
(set-language-environment "UTF-8")

;;(desktop-save-mode 1) 

(defvar dir (file-name-directory load-file-name)
  "The root dir of my  Emacs  distribution.")

(defvar savefile-dir (expand-file-name "savefile" dir)
  "This folder stores all the automatically generated save/history-files.")

(unless (file-exists-p savefile-dir)
  (make-directory savefile-dir))

(global-set-key (kbd "<f5>") 'revert-buffer)

(setq save-interprogram-paste-before-kill t)
#+END_SRC
** Lines
#+BEGIN_SRC emacs-lisp
; Highlights the current cursor line
  (global-hl-line-mode t)
  
  ; flashes the cursor's line when you scroll
  (use-package beacon
  :ensure t
  :config
  (beacon-mode 1)
  ; (setq beacon-color "#666600")
  )

#+END_SRC
** Source Blocks
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t
      org-src-window-setup 'current-window
      org-src-strip-leading-and-trailing-blank-lines t
      org-src-preserve-indentation t
      org-src-tab-acts-natively t)
#+END_SRC
** AutoSave
This saves the autosave files in one directory so it isn't messy
#+BEGIN_SRC emacs-lisp
(defvar emacs-autosave-directory
  (concat user-emacs-directory "autosaves/")
  "This variable dictates where to put auto saves. It is set to a
  directory called autosaves located wherever your .emacs.d/ is
  located.")

;; Sets all files to be backed up and auto saved in a single directory.
(setq backup-directory-alist
      `((".*" . ,emacs-autosave-directory))
      auto-save-file-name-transforms
      `((".*" ,emacs-autosave-directory t)))

;; Make backups of files, even when they're in version control
(setq vc-make-backup-files t)
#+END_SRC
** Modes to Disable
#+BEGIN_SRC emacs-lisp
(dolist (mode
         '(tool-bar-mode                ; No toolbars, more room for text
           scroll-bar-mode))              ; No scroll bars either
  (funcall mode 0))
#+END_SRC
** Modes to Enable
#+BEGIN_SRC emacs-lisp
(dolist (mode
         '(;;abbrev-mode                  ; E.g. sopl -> System.out.println
           ;;column-number-mode           ; Show column number in mode line
           delete-selection-mode        ; Replace selected text
           ;;dirtrack-mode                ; directory tracking in *shell*
           drag-stuff-global-mode       ; Drag stuff around
           global-company-mode          ; Auto-completion everywhere
           global-git-gutter-mode       ; Show changes latest commit
           ;;global-prettify-symbols-mode ; Greek letters should look greek
           ;;golden-ratio-mode            ; Automatic resizing of windows
           projectile-global-mode       ; Manage and navigate projects
           recentf-mode                 ; Recently opened files
           show-paren-mode))            ; Highlight matching parentheses
  (funcall mode 1))
#+END_SRC
* Appearance
** Themes
#+BEGIN_SRC emacs-lisp
;;(load-theme 'molokai t)
;;(load-theme 'material t)
;;(load-theme 'seti t)
;;(load-theme 'monokai t)
;;(load-theme 'zenburn t)
(load-theme 'solarized-light t)

;(use-package color-theme
;      :ensure t)


;;(use-package spacemacs-theme
    ;  :ensure t
    ;  ;:init
    ;  ;(load-theme 'spacemacs-dark t)
    ;  )


(use-package base16-theme
:ensure t
)

(use-package moe-theme
:ensure t)

(use-package eziam-theme
:ensure t)

(use-package alect-themes
:ensure t)

;;(load-theme 'base16-flat t)
;;(moe-light)
;;(powerline-moe-theme)
(use-package powerline
:ensure t
)

;;smart mode line
(setq sml/no-confirm-load-theme t)
(sml/setup)
;(sml/apply-theme 'dark)
;(setq sml/shorten-directory t)
;(setq sml/shorten-modes t)

;(load-theme 'smart-mode-line-light-powerline t)
#+END_SRC
** Lines
#+BEGIN_SRC emacs-lisp
(global-linum-mode 1)

(defadvice linum-update-window (around linum-dynamic activate)
  (let* ((w (length (number-to-string
                     (count-lines (point-min) (point-max)))))
         (linum-format (concat " %" (number-to-string w) "d ")))
    ad-do-it))
(require 'linum-off)
(require 'hlinum)
(hlinum-activate)
(fringe-mode -1)

#+END_SRC
** Scrolling
#+BEGIN_SRC emacs-lisp
(use-package smooth-scroll
  :ensure t
  :config
  (smooth-scroll-mode 1)
  (setq smooth-scroll/vscroll-step-size 5)
  )
#+END_SRC
** Fonts
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil
                    :family "Avenir Next"
                    :height 150
                    :weight 'normal
                    :width 'normal)

(when (functionp 'set-fontset-font)
  (set-fontset-font "fontset-default"
                    'unicode
                    (font-spec :family "Gill Sans"
                               :width 'normal
                               :size 15.5
                               :weight 'normal)))

;; font scaling
(use-package default-text-scale
  :ensure t
  :config
  (global-set-key (kbd "C-M-=") 'default-text-scale-increase)
  (global-set-key (kbd "C-M--") 'default-text-scale-decrease))

#+END_SRC
* Packages

** Languages
*** Python
(use-package elpy
  :defer 2
  :config
  (remove-hook 'elpy-modules 'elpy-module-flymake)
  (remove-hook 'elpy-modules 'elpy-module-yasnippet)
  (remove-hook 'elpy-modules 'elpy-module-pyvenv)
  (diminish 'elpy-mode "â˜•")
  (elpy-enable)
  ;; (elpy-use-ipython)
  )
#+BEGIN_SRC emacs-lisp


(use-package jedi
    :ensure t
    :init
    (add-hook 'python-mode-hook 'jedi:setup)
    (add-hook 'python-mode-hook 'jedi:ac-setup))


    (use-package elpy
    :ensure t
    :config 
    (elpy-enable))

(use-package py-autopep8
  :config
  (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save))
#+END_SRC
* Trying out
** Better Defaults
#+BEGIN_SRC emacs-lisp
(require 'better-defaults)
#+END_SRC
** Ace-window
#+BEGIN_SRC emacs-lisp
(use-package ace-window
:ensure t
:init
(progn
(setq aw-scope 'frame)
(global-set-key (kbd "C-x O") 'other-frame)
  (global-set-key [remap other-window] 'ace-window)
  (custom-set-faces
   '(aw-leading-char-face
     ((t (:inherit ace-jump-face-foreground :height 3.0))))) 
  ))

#+END_SRC
** Volatile highlighs
#+BEGIN_SRC emacs-lisp
(use-package volatile-highlights
  :diminish (volatile-highlights-mode . "")
  :config
  (volatile-highlights-mode t))
#+END_SRC
** Smex
#+BEGIN_SRC emacs-lisp
(use-package smex
  :init
  (setq smex-save-file
        (expand-file-name "smex-items" savefile-dir)))
#+END_SRC
** Fancy-Battery-mode
#+BEGIN_SRC emacs-lisp
(use-package fancy-battery
  :config
  (add-hook 'after-init-hook #'fancy-battery-mode))
#+END_SRC
** Rainbow-mode (like pigment)
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :diminish (rainbow-mode . "")
  :config
  (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC
** Avy
#+BEGIN_SRC emacs-lisp
(use-package avy
  :ensure t
  :bind (("s-l" . avy-goto-line)
         ("s-." . avy-goto-char-timer)
         ("M-s" . avy-goto-word-1))
  :config
  (setq avy-background t)
  ;; (setq avy-styles-alist '((avy-goto-word-or-subword-1 . de-brujin)))
  ;; (bind-key "s-." 'avy-goto-word-or-subword-1)
  )
#+END_SRC
** Save history
#+BEGIN_SRC emacs-lisp
;; savehist keeps track of some history
(use-package savehist
  :config
  (setq savehist-additional-variables
        ;; search entries
        '(search ring regexp-search-ring)
        ;; save every minute
        savehist-autosave-interval 60
        ;; keep the home clean
        savehist-file (expand-file-name "savehist" savefile-dir))
  (savehist-mode 1))
#+END_SRC
** Bookmarks
#+BEGIN_SRC emacs-lisp
;; bookmarks
(require 'bookmark)
(setq bookmark-default-file (expand-file-name "bookmarks" savefile-dir)
      bookmark-save-flag 1)
#+END_SRC
** Git Gutter Fringe
#+BEGIN_SRC 
(require 'git-gutter-fringe)

(dolist (p '((git-gutter:added    . "#0c0")
             (git-gutter:deleted  . "#c00")
             (git-gutter:modified . "#c0c")))
  (set-face-foreground (car p) (cdr p))
  (set-face-background (car p) (cdr p)))
#+END_SRC
** PDF Tools
#+BEGIN_SRC emacs-lisp
(add-hook 'pdf-tools-enabled-hook 'auto-revert-mode)
(add-to-list 'auto-mode-alist '("\\.pdf\\'" . pdf-tools-install))
#+END_SRC
** Prevent theme from going weird
When loading themes disable curren theme
#+BEGIN_SRC emacs-lisp
(defadvice load-theme
    (before disable-before-load (theme &optional no-confirm no-enable) activate)
  (mapc 'disable-theme custom-enabled-themes))

#+END_SRC
** Shell
#+BEGIN_SRC emacs-lisp
(use-package eshell
  :defer t
  :config
  (setq eshell-directory-name
        (expand-file-name "eshell" savefile-dir))

  (defun eshell/clear ()
    "Clears the shell buffer ala Unix's clear."
    ;; the shell prompts are read-only, so clear that for the duration
    (let ((inhibit-read-only t))
      ;; simply delete the region
      (erase-buffer))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(defun toggle-shell ()
  "Jumps to eshell or back."
  (interactive)
  (if (string= (buffer-name) "*shell*")
      (switch-to-prev-buffer)
    (shell)))
(defun clear-comint ()
  "Runs `comint-truncate-buffer' with the
`comint-buffer-maximum-size' set to zero."
  (interactive)
  (let ((comint-buffer-maximum-size 0))
    (comint-truncate-buffer)))
(add-hook 'comint-mode-hook (lambda () (local-set-key (kbd "C-l") 'clear-comint)))

#+END_SRC
** VirtualEnvWrapper
#+BEGIN_SRC emacs-lisp
(use-package virtualenvwrapper
  :ensure t
  :config
  (venv-initialize-interactive-shells)
  (venv-initialize-eshell))

#+END_SRC
** Lisp
*** Lisp --- Paraedit??
#+BEGIN_SRC emacs-lisp
(dolist (mode '(cider-repl-mode
                clojure-mode
                ielm-mode
                geiser-repl-mode
                slime-repl-mode
                lisp-mode
                emacs-lisp-mode
                lisp-interaction-mode
                scheme-mode))
  ;; add paredit-mode to all mode-hooks
  (add-hook (intern (concat (symbol-name mode) "-hook")) 'paredit-mode))
#+END_SRC
*** Enable eldoc-mode in emacs-lisp-mode to display info abt fxn n vaar
#+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
(add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
#+END_SRC
*** Common Lisp (Slime)
#+BEGIN_SRC emacs-lisp
(defun activate-slime-helper ()
  (when (file-exists-p "~/.quicklisp/slime-helper.el")
    (load (expand-file-name "~/.quicklisp/slime-helper.el"))
    (define-key slime-repl-mode-map (kbd "C-l")
      'slime-repl-clear-buffer))
  (remove-hook 'lisp-mode-hook #'activate-slime-helper))

(add-hook 'lisp-mode-hook #'activate-slime-helper)

(setq inferior-lisp-program "sbcl")

(setq lisp-loop-forms-indentation   6
      lisp-simple-loop-indentation  2
      lisp-loop-keyword-indentation 6)
#+END_SRC
** Java & C
#+BEGIN_SRC emacs-lisp
(defun c-setup ()
  (local-set-key (kbd "C-c C-c") 'compile))

(add-hook 'c-mode-common-hook 'c-setup)

(define-abbrev-table 'java-mode-abbrev-table
  '(("psv" "public static void main(String[] args) {" nil 0)
    ("sopl" "System.out.println" nil 0)
    ("sop" "System.out.printf" nil 0)))

(defun java-setup ()
  (abbrev-mode t)
  (setq-local compile-command (concat "javac " (buffer-name))))

(add-hook 'java-mode-hook 'java-setup)
#+END_SRC
** Markdown
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

(defun insert-markdown-inline-math-block ()
  "Inserts an empty math-block if no region is active, otherwise wrap a
math-block around the region."
  (interactive)
  (let* ((beg (region-beginning))
         (end (region-end))
         (body (if (region-active-p) (buffer-substring beg end) "")))
    (when (region-active-p)
      (delete-region beg end))
    (insert (concat "$math$ " body " $/math$"))
    (search-backward " $/math$")))
(add-hook 'markdown-mode-hook
          (lambda ()
            (auto-fill-mode 0)
            (visual-line-mode 1)
            (local-set-key (kbd "C-c b") 'insert-markdown-inline-math-block)) t)
#+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :mode ("\\.m[k]d" . markdown-mode)
  :defer t)


#+END_SRC
** Use-package (misc)
#+BEGIN_SRC emacs-lisp
(use-package dash
  :config
  (dash-enable-font-lock))

(use-package elisp
  :bind (("M-/" . hippie-expand)
         ([remap goto-line] . goto-line-with-feedback)
         ("C-:" . eval-expression)
         ("M-SPC" . cycle-spacing)
         ("s-k" . kill-this-buffer)
         ("C-c d" . duplicate-comment-current-line-or-region)
         ("C-x \\" . align-regexp)
         ("C-S-n" . my/forward-line-by-many)
         ("C-S-p" . my/backward-line-by-many)
         ("C-M-!" . my/iterm-shell-command)
         ("C-M-h" . backward-kill-word)
         :map ctl-x-map
         ("n" . narrow-or-widen-dwim)
         ("C-b" . ibuffer)))
#+END_SRC
** Dired
#+BEGIN_SRC emacs-lisp
(use-package dired
  :defer t
  :config
  (put 'dired-find-alternate-file 'disabled nil)

  ;; always delete and copy recursively
  (setq dired-recursive-deletes 'always)
  (setq dired-recursive-copies 'always)
  ;; show readable size
  (setq dired-listing-switches "-alh")

  (setq dired-dwim-target t)

  ;; enable some really cool extensions like C-x C-j(dired-jump)
  ;; (require 'dired-x)

  (setq-default dired-omit-mode t
                dired-omit-files "^\\.?#\\|^\\.$\\|^\\.\\.$\\|^\\."))
(use-package dired+
  :ensure t
  :after dired
  :config (require 'dired+)
  )

(use-package dired-quick-sort
  :ensure t
  :config
  (dired-quick-sort-setup))
#+END_SRC
** Magit
#+BEGIN_SRC emacs-lisp
(use-package magit
  :bind ("C-x g" . magit-dispatch-popup)
  :config
  (setq magit-completing-read-function 'ivy-completing-read)
  (with-eval-after-load 'magit-remote
    (define-key magit-mode-map "f" 'magit-pull-and-fetch-popup)
    (define-key magit-mode-map "F" nil)))

#+END_SRC
** Super-save
Autosave buffers -- event dependent
#+BEGIN_SRC emacs-lisp
(use-package super-save
  :diminish ""
  :config
  (add-to-list 'super-save-triggers "ace-window")
  (super-save-mode +1))
#+END_SRC
** Origami
#+BEGIN_SRC emacs-lisp
(use-package origami
:ensure t)
#+END_SRC
** iBuffer
#+BEGIN_SRC emacs-lisp
 (global-set-key (kbd "C-x C-b") 'ibuffer)
 (setq ibuffer-saved-filter-groups
	(quote (("default"
		 ("dired" (mode . dired-mode))
		 ("org" (name . "^.*org$"))
	       
		 ("web" (or (mode . web-mode) (mode . js2-mode)))
		 ("shell" (or (mode . eshell-mode) (mode . shell-mode)))
		 ("mu4e" (or

                (mode . mu4e-compose-mode)
                (name . "\*mu4e\*")
                ))
		 ("programming" (or
				 (mode . python-mode)
				 (mode . c++-mode)))
		 ("emacs" (or
			   (name . "^\\*scratch\\*$")
			   (name . "^\\*Messages\\*$")))
		 ))))
 (add-hook 'ibuffer-mode-hook
	    (lambda ()
	      (ibuffer-auto-mode 1)
	      (ibuffer-switch-to-saved-filter-groups "default")))

 ;; don't show these
					  ;(add-to-list 'ibuffer-never-show-predicates "zowie")
 ;; Don't show filter groups if there are no buffers in that group
 (setq ibuffer-show-empty-filter-groups nil)

 ;; Don't ask for confirmation to delete marked buffers
 (setq ibuffer-expert t)

#+END_SRC
** Always maximise emacs
#+BEGIN_SRC emacs-lisp
;;(modify-all-frames-parameters '((fullscreen . maximized)))

(toggle-frame-maximized)
#+END_SRC
** Git time machine
Visit a git-controlled file and issue M-x git-timemachine (or bind it to a keybinding of your choice). If you just need to toggle the time machine you can use M-x git-timemachine-toggle.

Use the following keys to navigate historic version of the file

p Visit previous historic version
n Visit next historic version
w Copy the abbreviated hash of the current historic version
W Copy the full hash of the current historic version
g Goto nth revision
q Exit the time machine.
b Run magit-blame on the currently visited revision (if magit available).
#+BEGIN_SRC emacs-lisp
(use-package git-timemachine
  :commands git-timemachine)
#+END_SRC
** Key Chord
maps pairs of simulataneously pressed keys to commands
(use-package key-chord
  :config
  (setq key-chord-two-keys-delay 0.05)
  (key-chord-define-global "x1" 'delete-other-windows)
  ;; (key-chord-define-global "xk" 'ace-window)
  (key-chord-define-global "0o" 'delete-window))

(eval-when-compile
  (require 'use-package))
(use-package use-package-chords
  :config (key-chord-mode 1))
** Autocomplete -- Company
#+BEGIN_SRC emacs-lisp
(use-package company
  :defer t
  :diminish (company-mode . "CPY")
  :init (add-hook 'after-init-hook 'global-company-mode)
  :config
  ;; Give Company a decent default configuration.
  (setq company-minimum-prefix-length 2
        company-selection-wrap-around t
        company-show-numbers t
        company-tooltip-align-annotations t
        company-require-match nil
        company-dabbrev-downcase nil
        company-dabbrev-ignore-case nil
        company-idle-delay 0
        company-echo-delay 0
        company-dabbrev-downcase nil
        company-transformers '(company-sort-by-occurrence
                             company-sort-by-backend-importance)))

  ;; Sort completion candidates that already occur in the current
  ;; buffer at the top of the candidate list.
  ;; (setq company-transformers '(company-sort-by-occurrence))
  ;; (setq company-tooltip-align-annotations t)
  ;; (setq company-idle-delay 0.2)
  ;; (setq company-dabbrev-ignore-case nil)
  ;; (setq company-dabbrev-downcase nil)
  ;; (setq company-tooltip-flip-when-above t)
  ;; (setq company-dabbrev-code-other-buffers 'code)
  

(use-package company-flx
  :config
  (company-flx-mode +1))

#+END_SRC
** Flyspell
#+BEGIN_SRC emacs-lisp
(use-package flyspell
  :defer t
  :diminish (flyspell-mode . "")
  :init
  (add-hook 'markdown-mode-hook 'flyspell-mode)
  (add-hook 'text-mode-hook 'flyspell-mode)
  :config
  (setq flyspell-issue-welcome-flag nil)
  (setq flyspell-issue-message-flag nil)
  (setq ispell-program-name "aspell"    ; use aspell instead of ispell
        ispell-extra-args '("--sug-mode=ultra"))
  ;; Make spell check on right click.
  (define-key flyspell-mouse-map [down-mouse-3] 'flyspell-correct-word)
  (define-key flyspell-mouse-map [mouse-3] 'undefined)
  (define-key flyspell-mode-map (kbd "C-M-i") nil)
  (define-key flyspell-mode-map (kbd "C-;") nil)

  (flyspell-prog-mode)
  ;; Enable spell check in only plaintext
  ;; (add-hook 'text-mode-hook 'flyspell-mode)
  ;; Enable spell check in comments
  ;; (add-hook 'prog-mode-hook 'flyspell-prog-mode)
  )

;; (add-hook 'text-mode-hook 'turn-on-flyspell)

;; (add-hook 'prog-mode-hook 'flyspell-prog-mode)

;; (defadvice turn-on-flyspell (before check nil activate))
 
;; (defadvice flyspell-prog-mode (before check nil activate))

(add-hook 'org-mode-hook 'turn-on-flyspell)
(add-hook 'org-mode-hook 'turn-on-auto-fill)

#+END_SRC
** Org
*** Agenda & Capture (TODO)
#+BEGIN_SRC emacs-lisp
(use-package org
  :defer t
  :bind (("C-c a" . org-agenda)
         ("C-c c" . org-capture)
         ("C-c l" . org-store-link))
  :config
  (require 'ox-md)
  (unbind-key "C-c ;" org-mode-map))

  ;;file to save todo items
  (setq org-agenda-files (quote ("~/.emacs.d/org/todo.org")))


  ;;set priority range from A to C with default A
  (setq org-highest-priority ?A)
  (setq org-lowest-priority ?C)
  (setq org-default-priority ?A)


  ;;set colours for priorities
  (setq org-priority-faces '((?A . (:foreground "OliveDrab" :weight bold))
                             (?B . (:foreground "LightSteelBlue"))
                             (?C . (:foreground "#F0DFAF"))))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; org-mode agenda options                                                ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;open agenda in current window
  (setq org-agenda-window-setup (quote current-window))
  ;;warn me of any deadlines in next 7 days
  (setq org-deadline-warning-days 7)

  ;;don't show tasks as scheduled if they are already shown as a deadline
  (setq org-agenda-skip-scheduled-if-deadline-is-shown t)
  ;;don't give awarning colour to tasks with impending deadlines
  ;;if they are scheduled to be done
  (setq org-agenda-skip-deadline-prewarning-if-scheduled (quote pre-scheduled))
  ;;don't show tasks that are scheduled or have deadlines in the
  ;;normal todo list
  (setq org-agenda-todo-ignore-deadlines (quote all))
  (setq org-agenda-todo-ignore-scheduled (quote all))

  ;;sort tasks in order of when they are due and then by priority

  (setq org-agenda-sorting-strategy
        (quote
         ((agenda deadline-up priority-down)
          (todo priority-down category-keep)
          (tags priority-down category-keep)
          (search category-keep))))

;;(global-set-key "\C-ca" 'org-agenda)

(setq org-agenda-custom-commands
            '(("c" "Simple agenda view"
            ((agenda "")
            (alltodo "")))))

            (use-package org-ac
          	  :ensure t
          	  :init (progn
          		  (require 'org-ac)
          		  (org-ac/config-default)
          		  ))

(setq org-todo-keywords
      '((sequence "TODO(t)" "IN-PROGRESS" "WAITING" "|" "DONE(d)"
      "CANCELED(c@/!)")))
(setq org-use-fast-todo-selection t)
  (setq org-treat-S-cursor-todo-selection-as-state-change nil)
  (setq org-todo-keyword-faces
        '(("TODO" . (:foreground "green" :weight bold))
          ("NEXT" :foreground "blue" :weight bold)
          ("WAITING" :foreground "orange" :weight bold)
          ("HOLD" :foreground "magenta" :weight bold)
          ("CANCELLED" :foreground "forest green" :weight bold)))

  (setq org-enforce-todo-dependencies t)

(setq org-confirm-babel-evaluate nil)
(setq org-agenda-files '("~/.emacs.d/org/gtd/inbox.org"
                         "~/.emacs.d/org/gtd.gtd.org"
                         "~/.emacs.d/org/gtd/tickler.org"
                         "~/.emacs.d/org/orgfiles/gcal.org"
                         "~/.emacs.d/org/orgfiles/i.org"
                         "~/.emacs.d/org/orgfiles/schedule.org"))

;;(define-key global-map "\C-c c" 'org-capture)
;; (setq org-capture-templates
;;        '(("t" "todo" entry (file+headline "~/.emacs.d/org/gtd/todo.org" "Tasks")
;;           "* TODO [#A] %?\nSCHEDULED: %(org-insert-time-stamp (org-read-date nil t \"+0d\"))\n")))

(setq org-capture-templates '(("t" "Todo [inbox]" entry
                               (file+headline "~/.emacs.d/org/gtd/inbox.org" "Tasks")
                               "* TODO %i%?")
                    
                              ("T" "Tickler" entry
                               (file+headline "~/.emacs.d/org/gtd/tickler.org" "Tickler")
                               "* %i%? \n %U")

                              ("i" "Ideas" entry
                               (file+headline
                               "~/.emacs.d/org/writing/ideas.org" "Ideas") "*
                               %i%? \n %U")

                              ("a" "Appointment" entry 
                               (file+headline 
                                "~/.emacs.d/org/orgfiles/gcal.org" "Appointment") "* %?\n\n%^T\n\n:PROPERTIES:\n\n:END:\n\n")

                              ("l" "Link" entry 
                               (file+headline "~/.emacs.d/org/orgfiles/links.org" "Links") "* %? %^L %^g \n%T" :prepend t)
                              ("b" "Blog idea" entry 
                               (file+headline "~/.emacs.d/org/orgfiles/i.org" "Blog Topics:") "* %?\n%T" :prepend t)
                              ;;("t" "To Do Item" entry (file+headline
                             ;; "~/.emacs.d/org/orgfiles/i.org" "To Do")  "* TODO %?\n%u" :prepend t)
                              ("m" "Must Do" entry (file+headline
          				   "~/.emacs.d/org/orgfiles/i.org" "To Do")  "* TODO %a\n %?" :prepend t)
                              ("n" "Note" entry (file+headline
          				   "~/.emacs.d/org/orgfiles/i.org" "Note
          				   space") "* %?\n%u" :prepend t)
                     ))


(setq org-refile-targets '(("~/.emacs.d/org/gtd.org" :maxlevel . 3)
                           ("~/.emacs.d/org/someday.org" :level . 1)
                           ("~/.emacs.d/org/tickler.org" :maxlevel . 2)))

#+END_SRC
*** Source-Blocks
#+BEGIN_SRC emacs-lisp
(setq org-src-fontify-natively t
      org-src-tab-acts-natively t
      org-confirm-babel-evaluate nil
      org-edit-src-content-indentation 0)
#+END_SRC
*** Defaults?
 '(org-startup-folded (quote overview)) ---- put this inside custom-set-variables
#+BEGIN_SRC emacs-lisp
 (custom-set-variables
             '(org-directory "~/.emacs.d/org")
             '(org-default-notes-file (concat org-directory "~/.emacs.d/org/notes.org"))
             '(org-export-html-postamble nil)
             '(org-hide-leading-stars t)
             '(org-startup-indented t)
             )

(setq org-file-apps
  		(append '(
          		  ("\\.pdf\\'" . "evince %s")
          		  ) org-file-apps ))


 (defadvice org-capture-finalize 
            (after delete-capture-frame activate)  
        "Advise capture-finalize to close the frame"  
        (if (equal "capture" (frame-parameter nil 'name))  
        (delete-frame)))

        (defadvice org-capture-destroy 
            (after delete-capture-frame activate)  
        "Advise capture-destroy to close the frame"  
        (if (equal "capture" (frame-parameter nil 'name))  
        (delete-frame))) 
(use-package noflet
        :ensure t )
        (defun make-capture-frame ()
        "Create a new frame and run org-capture."
        (interactive)
        (make-frame '((name . "capture")))
        (select-frame-by-name "capture")
        (delete-other-windows)
        (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
            (org-capture)))

(require 'ox-beamer)
(use-package epresent
:ensure t)
 
  ;; execute external programs.
  (org-babel-do-load-languages
   (quote org-babel-load-languages)
   (quote ((emacs-lisp . t)
           ;;(dot . t)
           ;;(ditaa . t)
           (python . t)
           (ruby . t)
           ;;(gnuplot . t)
           ;;(clojure . t)
           ;;(sh . t)
           ;;(haskell . t)
           ;;(octave . t)
           (org . t)
           ;;(plantuml . t)
           ;;(scala . t)
           ;;(sql . t)
           (latex . t))))

  (eval-after-load 'org-src
    '(define-key org-src-mode-map
       "\C-x\C-s" #'org-edit-src-exit))

`(add-hook 'org-mode-hook 'turn-on-font-lock)'


#+END_SRC
*** Bullets
#+BEGIN_SRC emacs-lisp
(setenv "BROWSER" "chromium-browser")

        (use-package org-bullets
        :ensure t
        :config
        (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

#+END_SRC
*** Ox-reveal (Presentation)
#+BEGIN_SRC emacs-lisp
(use-package ox-reveal
:ensure ox-reveal)

(setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
(setq org-reveal-mathjax t)

(use-package htmlize
:ensure t)
#+END_SRC
** Which-Key
#+BEGIN_SRC emacs-lisp
(use-package which-key
  :ensure t
  :config
  ;;(which-key-setup-side-window-right-bottom)
  (which-key-mode))

#+END_SRC
** Pdf-tools
#+BEGIN_SRC emacs-lisp
(use-package pdf-tools
  :config
  (pdf-tools-install))
#+END_SRC
** Swiper - Counsel
#+BEGIN_SRC emacs-lisp
(use-package swiper
  :ensure try
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> l") 'counsel-load-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))
(ivy-mode 1)

(use-package counsel
  :bind (("C-x C-f" . counsel-find-file)
         ("C-h f" . counsel-describe-function)
         ("C-h v" . counsel-describe-variable)
         ("M-y" . counsel-yank-pop)))

(counsel-projectile-on)
#+END_SRC
** Expand-Region
#+BEGIN_SRC emacs-lisp
(use-package expand-region
  :bind ("M-2" . er/expand-region))
#+END_SRC
** Multiple-cursors
#+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :bind (("C->" . mc/mark-next-like-this)
         ("C-<" . mc/mark-previous-like-this)
         ("C-c C-<" . mc/mark-all-like-this)
         ("C-c C->" . mc/mark-more-like-this-extended))
  :init
  (setq mc/list-file (expand-file-name "mc-lists.el" savefile-dir)))
#+END_SRC
** Paradox Package Manager
#+BEGIN_SRC emacs-lisp
(require 'paradox)
(paradox-enable)
;;(setq paradox-github-token e4bc38d99d8fa15b00b2ad0f010134d4dd61158e)

#+END_SRC

* Someday
** Calendar
(defun calendar-show-week (arg)
  "Displaying week number in calendar-mode."
  (interactive "P")
  (copy-face font-lock-constant-face 'calendar-iso-week-face)
  (set-face-attribute
   'calendar-iso-week-face nil :height 0.7)
  (setq calendar-intermonth-text
        (and arg
             '(propertize
               (format
                "%2d"
                (car (calendar-iso-from-absolute
                      (calendar-absolute-from-gregorian
                       (list month day year)))))
               'font-lock-face 'calendar-iso-week-face))))
(calendar-show-week t)
(setq calendar-week-start-day 1
      calendar-latitude 1.35
      calendar-longitude 103.8
      calendar-location-name "Singapore")
** Tidy up a buffer
(defun tidy ()
  "Ident, untabify and unwhitespacify current buffer, or region if active."
  (interactive)
  (let ((beg (if (region-active-p) (region-beginning) (point-min)))
        (end (if (region-active-p) (region-end) (point-max))))
    (indent-region beg end)
    (whitespace-cleanup)
    (untabify beg (if (< end (point-max)) end (point-max)))))
** Modeline
(use-package spaceline-config
  :ensure spaceline
  :config
  (setq powerline-default-separator 'wave
        spaceline-workspace-numbers-unicode t
        spaceline-window-numbers-unicode t)
  (spaceline-spacemacs-theme)
  (spaceline-helm-mode)
  (spaceline-info-mode))
** Save place (rmb location in a file)
;; saveplace remembers your location in a file when saving files
(use-package saveplace
  :config
  (setq save-place-file (expand-file-name "saveplace" savefile-dir))
  ;; activate it for all buffers
  (setq-default save-place t))
** Misc
;; reduce the frequency of garbage collection by making it happen on
(setq gc-cons-threshold (* 1024 1024 20))

;; warn when opening files bigger than 100MB
(setq large-file-warning-threshold 100000000)

;; autopair
;; (electric-pair-mode)

;; enable narrowing commands
(put 'narrow-to-region 'disabled nil)
(put 'narrow-to-page 'disabled nil)
(put 'narrow-to-defun 'disabled nil)

;; enabled change region case commands
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)

;; enable erase-buffer command
(put 'erase-buffer 'disabled nil)

;; (show-paren-mode 1)
** Helm
(require 'helm)
(require 'helm-config)

(setq helm-split-window-in-side-p t
      helm-M-x-fuzzy-match t
      helm-buffers-fuzzy-matching t
      helm-recentf-fuzzy-match t
      helm-move-to-line-cycle-in-source t
      projectile-completion-system 'helm)

(when (executable-find "ack")
  (setq helm-grep-default-command
        "ack -Hn --no-group --no-color %e %p %f"
        helm-grep-default-recurse-command
        "ack -H --no-group --no-color %e %p %f"))

(set-face-attribute 'helm-selection nil :background "cyan")

(helm-mode 1)
(helm-projectile-on)
(helm-adaptive-mode 1)

(use-package helm
  :disabled t
  ;; :bind (("M-y" . helm-show-kill-ring)
  ;;        ("C-x C-f" . helm-find-files)
  ;;        ("C-c C-r" . helm-resume))
  :commands (helm-projectile-switch-project)
  ;; :chords (("xn" . helm-mini)
  ;;          ("xm" . helm-M-x))
  :config
  (require 'helm-config)

  (setq helm-quick-update                     t
        helm-split-window-in-side-p           t
        helm-M-x-fuzzy-match                  t
        helm-mode-fuzzy-match                 t
        helm-apropos-fuzzy-match              t
        helm-buffers-fuzzy-matching           t
        helm-recentf-fuzzy-match              t
        helm-move-to-line-cycle-in-source     t
        helm-ff-search-library-in-sexp        t
        helm-ff-file-name-history-use-recentf t)

  ;; show minibuffer history with Helm
  (bind-key "C-c C-l" 'helm-minibuffer-history minibuffer-local-map)

  ;; shell history.
  (bind-key "C-c C-l" 'helm-comint-input-ring shell-mode-map)
  ;; (helm-mode +1)
  )

(use-package helm-flx
  :disabled t
  :config
  (helm-flx-mode +1))

(use-package helm-fuzzier
  :disabled t
  :after helm
  :config
  (helm-fuzzier-mode 1))

(use-package helm-descbinds
  :bind ("C-c b" . helm-descbinds))

(use-package helm-projectile
  :disabled t
  :after helm)

(use-package helm-ag
  :disabled t
  :defer t
  :init
  (setq helm-ag-base-command "ag --nocolor --nogroup --ignore-case"
        helm-ag-command-option "--all-text"
        helm-ag-insert-at-point 'symbol))

** Ido-related
(require 'ido)
(setq ido-enable-prefix nil
      ido-enable-flex-matching t
      ido-create-new-buffer 'always
      ido-use-filename-at-point 'guess
      ido-max-prospects 10
      ido-save-directory-list-file (expand-file-name "ido.hist" savefile-dir)
      ido-default-file-method 'selected-window
      ido-auto-merge-work-directories-length -1)
(ido-mode +1)

;; disable ido faces to see flx highlights
(setq ido-use-faces nil)

** Macrosteps
(use-package macrostep
  :bind (:map
         emacs-lisp-mode-map
         ("C-c e" . macrostep-expand)))

** iedit

(use-package iedit)

** Osx-trash
(use-package osx-trash
  :config
  (osx-trash-setup))
** Ranger
(use-package ranger
  :bind* ("C-x C-j" . ranger))
** QuickRun
(use-package quickrun
  :after f2j-mode)
** Wgrep
Wgrep allows you to edit a grep buffer and apply those changes to the file buffer.

(use-package wgrep-ag
  :config
  (add-hook 'ag-mode-hook 'wgrep-ag-setup))
** Goto-chg
(use-package goto-chg
  :bind ("C-M-." . goto-last-change))

** eyebrowse
(use-package eyebrowse
  :config
  (eyebrowse-mode t))

** Zop-to-char
(use-package zop-to-char
  :bind ("M-z" . zop-to-char))

** Pandoc-mode
(use-package pandoc-mode
  :config
  (add-hook 'markdown-mode-hook 'pandoc-mode)
  ;; (add-hook 'org-mode-hook 'pandoc-mode)
  (add-hook 'pandoc-mode-hook 'pandoc-load-default-settings))

** Whitespcae
(use-package whitespace
  :diminish (whitespace-mode . "")
  :config
  (dolist (hook '(prog-mode-hook text-mode-hook))
    (add-hook hook #'whitespace-mode))
  (setq whitespace-line-column 80)
  (setq whitespace-style '(face tabs empty trailing)))

(use-package whitespace-cleanup-mode
  :diminish (whitespace-cleanup-mode . "")
  :config
  (add-hook 'prog-mode-hook 'whitespace-cleanup-mode))

** Pop-win
to manage the size of popup buffers
(use-package popwin
  :config
  (popwin-mode 1))

** Ace-link
Follow link in documents (info page type)
(use-package ace-link
  :config
  (ace-link-setup-default))
** Crux
A Collection of Ridiculously Useful eXtensions for Emacs
(use-package crux
  :demand t
  :bind (("C-c n" . crux-cleanup-buffer-or-region)
         ("C-c k" . crux-kill-other-buffers)
         ([remap kill-whole-line] . crux-kill-whole-line)
         ([(control shift return)] . crux-smart-open-line-above)
         ("s-j" . crux-top-join-line)
         ("C-x p" . crux-switch-to-previous-buffer))
  :config
  (crux-with-region-or-buffer indent-region)
  (crux-with-region-or-buffer untabify)
  (crux-with-region-or-line kill-region))
** Hydra
(use-package hydra
  :bind (("s-f" . hydra-projectile/body)
         ("C-x t" . hydra-toggle/body)
         ("C-M-o" . hydra-window/body))
  :config
  (hydra-add-font-lock)

  (require 'windmove)

  (defun hydra-move-splitter-left (arg)
    "Move window splitter left."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'right))
        (shrink-window-horizontally arg)
      (enlarge-window-horizontally arg)))

  (defun hydra-move-splitter-right (arg)
    "Move window splitter right."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'right))
        (enlarge-window-horizontally arg)
      (shrink-window-horizontally arg)))

  (defun hydra-move-splitter-up (arg)
    "Move window splitter up."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'up))
        (enlarge-window arg)
      (shrink-window arg)))

  (defun hydra-move-splitter-down (arg)
    "Move window splitter down."
    (interactive "p")
    (if (let ((windmove-wrap-around))
          (windmove-find-other-window 'up))
        (shrink-window arg)
      (enlarge-window arg)))

  (defhydra hydra-toggle (:color teal)
    "
_a_ abbrev-mode:      %`abbrev-mode
_d_ debug-on-error    %`debug-on-error
_f_ auto-fill-mode    %`auto-fill-function
_t_ truncate-lines    %`truncate-lines

"
    ("a" abbrev-mode nil)
    ("d" toggle-debug-on-error nil)
    ("f" auto-fill-mode nil)
    ("t" toggle-truncate-lines nil)
    ("q" nil "cancel"))

  (key-chord-define-global
   "ds"
   (defhydra hydra-zoom ()
     "zoom"
     ("j" text-scale-increase "in")
     ("k" text-scale-decrease "out")
     ("0" (text-scale-set 0) "reset")
     ("1" (text-scale-set 0) :bind nil)
     ("2" (text-scale-set 0) :bind nil :color blue)))

  (defhydra hydra-error (global-map "M-g")
    "goto-error"
    ("h" flycheck-list-errors "first")
    ("j" flycheck-next-error "next")
    ("k" flycheck-previous-error "prev")
    ("v" recenter-top-bottom "recenter")
    ("q" nil "quit"))

  (defhydra hydra-window (:color amaranth)
    "
Move Point^^^^   Move Splitter   ^Ace^                       ^Split^
--------------------------------------------------------------------------------
_w_, _<up>_      Shift + Move    _C-a_: ace-window           _2_: split-window-below
_a_, _<left>_                    _C-s_: ace-window-swap      _3_: split-window-right
_s_, _<down>_                    _C-d_: ace-window-delete    ^ ^
_d_, _<right>_                   ^   ^                       ^ ^
You can use arrow-keys or WASD.
"
    ("2" split-window-below nil)
    ("3" split-window-right nil)
    ("a" windmove-left nil)
    ("s" windmove-down nil)
    ("w" windmove-up nil)
    ("d" windmove-right nil)
    ("A" hydra-move-splitter-left nil)
    ("S" hydra-move-splitter-down nil)
    ("W" hydra-move-splitter-up nil)
    ("D" hydra-move-splitter-right nil)
    ("<left>" windmove-left nil)
    ("<down>" windmove-down nil)
    ("<up>" windmove-up nil)
    ("<right>" windmove-right nil)
    ("<S-left>" hydra-move-splitter-left nil)
    ("<S-down>" hydra-move-splitter-down nil)
    ("<S-up>" hydra-move-splitter-up nil)
    ("<S-right>" hydra-move-splitter-right nil)
    ("C-a" ace-window nil)
    ("u" hydra--universal-argument nil)
    ;;("C-s" (lambda () (interactive) (ace-window 4)) nil)
    ("C-d" (lambda () (interactive) (ace-window 16)) nil)
    ("q" nil "quit"))

  (defhydra hydra-org-template (:color blue :hint nil)
    "
_c_enter  _q_uote     _e_macs-lisp    _L_aTeX:
_l_atex   _E_xample   _p_erl          _i_ndex:
_a_scii   _v_erse     _P_erl tangled  _I_NCLUDE:
_s_rc     ^ ^         plant_u_ml      _H_TML:
_h_tml    ^ ^         ^ ^             _A_SCII:
"
    ("s" (hot-expand "<s"))
    ("E" (hot-expand "<e"))
    ("q" (hot-expand "<q"))
    ("v" (hot-expand "<v"))
    ("c" (hot-expand "<c"))
    ("l" (hot-expand "<l"))
    ("h" (hot-expand "<h"))
    ("a" (hot-expand "<a"))
    ("L" (hot-expand "<L"))
    ("i" (hot-expand "<i"))
    ("e" (progn
           (hot-expand "<s")
           (insert "emacs-lisp")
           (forward-line)))
    ("p" (progn
           (hot-expand "<s")
           (insert "perl")
           (forward-line)))
    ("u" (progn
           (hot-expand "<s")
           (insert "plantuml :file CHANGE.png")
           (forward-line)))
    ("P" (progn
           (insert "#+HEADERS: :results output :exports both :shebang \"#!/usr/bin/env perl\"\n")
           (hot-expand "<s")
           (insert "perl")
           (forward-line)))
    ("I" (hot-expand "<I"))
    ("H" (hot-expand "<H"))
    ("A" (hot-expand "<A"))
    ("<" self-insert-command "ins")
    ("o" nil "quit"))

  (defun hot-expand (str)
    "Expand org template."
    (insert str)
    (org-try-structure-completion))

  (with-eval-after-load "org"
    (define-key org-mode-map "<"
      (lambda () (interactive)
        (if (looking-back "^")
            (hydra-org-template/body)
          (self-insert-command 1))))))

(defhydra hydra-projectile (:color blue :columns 4)
  "Projectile"
  ("a" counsel-git-grep "ag")
  ("b" projectile-switch-to-buffer "switch to buffer")
  ("c" projectile-compile-project "compile project")
  ("d" projectile-find-dir "dir")
  ("f" projectile-find-file "file")
  ;; ("ff" projectile-find-file-dwim "file dwim")
  ;; ("fd" projectile-find-file-in-directory "file curr dir")
  ("g" ggtags-update-tags "update gtags")
  ("i" projectile-ibuffer "Ibuffer")
  ("K" projectile-kill-buffers "Kill all buffers")
  ;; ("o" projectile-multi-occur "multi-occur")
  ("p" projectile-switch-project "switch")
  ("r" projectile-run-async-shell-command-in-root "run shell command")
  ("x" projectile-remove-known-project "remove known")
  ("X" projectile-cleanup-known-projects "cleanup non-existing")
  ("z" projectile-cache-current-file "cache current")
  ("q" nil "cancel"))

(use-package corral
  :bind ("C-c v" . hydra-corral/body)
  :config
  (setq corral-preserve-point t)
  (defhydra hydra-corral (:columns 4)
    "Corral"
    ("(" corral-parentheses-backward "Back")
    (")" corral-parentheses-forward "Forward")
    ("[" corral-brackets-backward "Back")
    ("]" corral-brackets-forward "Forward")
    ("{" corral-braces-backward "Back")
    ("}" corral-braces-forward "Forward")
    ("." hydra-repeat "Repeat")))
*** Flycheck
#+BEGIN_SRC emacs-lisp
(use-package flycheck
  :defer t
  :init
  (add-hook 'after-init-hook #'global-flycheck-mode)
  :config
  (setq-default flycheck-disabled-checkers '(emacs-lisp-checkdoc))
  ;; (setq flycheck-indication-mode nil)
  )
#+END_SRC
*** Flycheck pos-tip
#+BEGIN_SRC emacs-lisp
(use-package flycheck-pos-tip
  :disabled t
  :after flycheck
  :config
  (flycheck-pos-tip-mode))

#+END_SRC
*** Beacon
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :diminish (beacon-mode . "")
  :config
  (beacon-mode 1))
#+END_SRC
*** Projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile
  :defer t
  :diminish ""
  :init
  (setq projectile-cache-file
        (expand-file-name  "projectile.cache" savefile-dir)
        projectile-known-projects-file
        (expand-file-name  "projectile-bookmarks.eld" savefile-dir))
  (projectile-global-mode t)
  :config
  (setq projectile-sort-order 'modification-time
        projectile-completion-system 'ivy))
#+END_SRC
*** Yasnippets
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :diminish (yas-minor-mode . "")
  :config
  (add-to-list 'auto-mode-alist '("\\.yasnippet$" . snippet-mode))
  (setq yas-verbosity 1)
  (setq yas-wrap-around-region t)
  (setq-default yas-prompt-functions '(yas-ido-prompt))
  (bind-key "<return>" 'yas-exit-all-snippets yas-keymap)
  (yas-global-mode 1))
#+END_SRC
*** Undo-tree
 Undo with C-/ and redo with C-?.
#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :diminish (undo-tree-mode . "")
  :config
  (global-undo-tree-mode 1))
#+END_SRC
*** Hungry Delete
#+BEGIN_SRC emacs-lisp
; deletes all the whitespace when you hit backspace or delete
  (use-package hungry-delete
  :ensure t
  :config
  (global-hungry-delete-mode))

#+END_SRC
*** Regions -- smart widen & narrowing
#+BEGIN_SRC emacs-lisp
; if you're windened, narrow to the region, if you're narrowed, widen
; bound to C-x n
(defun narrow-or-widen-dwim (p)
"If the buffer is narrowed, it widens. Otherwise, it narrows intelligently.
Intelligently means: region, org-src-block, org-subtree, or defun,
whichever applies first.
Narrowing to org-src-block actually calls `org-edit-src-code'.

With prefix P, don't widen, just narrow even if buffer is already
narrowed."
(interactive "P")
(declare (interactive-only))
(cond ((and (buffer-narrowed-p) (not p)) (widen))
((region-active-p)
(narrow-to-region (region-beginning) (region-end)))
((derived-mode-p 'org-mode)
;; `org-edit-src-code' is not a real narrowing command.
;; Remove this first conditional if you don't want it.
(cond ((ignore-errors (org-edit-src-code))
(delete-other-windows))
((org-at-block-p)
(org-narrow-to-block))
(t (org-narrow-to-subtree))))
(t (narrow-to-defun))))

;; (define-key endless/toggle-map "n" #'narrow-or-widen-dwim)
;; This line actually replaces Emacs' entire narrowing keymap, that's
;; how much I like this command. Only copy it if that's what you want.
(define-key ctl-x-map "n" #'narrow-or-widen-dwim)

#+END_SRC
*** Browse kill ring
#+BEGIN_SRC emacs-lisp
(use-package browse-kill-ring
  :config
  (browse-kill-ring-default-keybindings))
#+END_SRC
*** Move-text
#+BEGIN_SRC emacs-lisp
(use-package move-text
  :bind (("<C-M-up>" . move-text-up)
         ("<C-M-down>" . move-text-down)))
#+END_SRC
*** Reveal in osx finder
#+BEGIN_SRC emacs-lisp
(use-package reveal-in-osx-finder
  :if (eq system-type 'darwin)
  :bind
  ("C-c o" . reveal-in-osx-finder))
#+END_SRC
*** Smartparens
(use-package smartparens-config
  :ensure smartparens
  :config
  ;; (use-package smartparens-config)
  ;; ;; highlights matching pairs
  ;; (setq sp-base-key-bindings 'paredit)
  ;; (setq sp-autoskip-closing-pair 'always)
  ;; (sp-use-paredit-bindings)
  ;; (sp-pair "{" nil :post-handlers
  ;;          '(((lambda (&rest _ignored)
  ;;               (prelude-smart-open-line-above)) "RET")))
  (show-smartparens-global-mode t)

  (add-hook 'prog-mode-hook 'turn-on-smartparens-mode)
  (add-hook 'LaTeX-mode-hook 'turn-on-smartparens-mode)
  (add-hook 'markdown-mode-hook 'turn-on-smartparens-mode))


#+BEGIN_SRC emacs-lisp

(use-package smartparens
:ensure t
:config
(use-package smartparens-config)
(use-package smartparens-html)
(use-package smartparens-python)
(use-package smartparens-latex)
(smartparens-global-mode t)
(show-smartparens-global-mode t)
:bind
( ("C-<down>" . sp-down-sexp)
 ("C-<up>"   . sp-up-sexp)
 ("M-<down>" . sp-backward-down-sexp)
 ("M-<up>"   . sp-backward-up-sexp)
("C-M-a" . sp-beginning-of-sexp)
 ("C-M-e" . sp-end-of-sexp)



 ("C-M-f" . sp-forward-sexp)
 ("C-M-b" . sp-backward-sexp)

 ("C-M-n" . sp-next-sexp)
 ("C-M-p" . sp-previous-sexp)

 ("C-S-f" . sp-forward-symbol)
 ("C-S-b" . sp-backward-symbol)

 ("C-<right>" . sp-forward-slurp-sexp)
 ("M-<right>" . sp-forward-barf-sexp)
 ("C-<left>"  . sp-backward-slurp-sexp)
 ("M-<left>"  . sp-backward-barf-sexp)


 ("C-M-t" . sp-transpose-sexp)
 ("C-M-k" . sp-kill-sexp)
 ("C-k"   . sp-kill-hybrid-sexp)
 ("M-k"   . sp-backward-kill-sexp)
 ("C-M-w" . sp-copy-sexp)

 ("C-M-d" . delete-sexp)

 ("M-<backspace>" . backward-kill-word)
 ("C-<backspace>" . sp-backward-kill-word)
 ([remap sp-backward-kill-word] . backward-kill-word)

 ("M-[" . sp-backward-unwrap-sexp)
 ("M-]" . sp-unwrap-sexp)

 ("C-x C-t" . sp-transpose-hybrid-sexp)

 ("C-c ("  . wrap-with-parens)
 ("C-c ["  . wrap-with-brackets)
 ("C-c {"  . wrap-with-braces)
 ("C-c '"  . wrap-with-single-quotes)
 ("C-c \"" . wrap-with-double-quotes)
 ("C-c _"  . wrap-with-underscores)
("C-c `"  . wrap-with-back-quotes)
))

#+END_SRC
*** Easy-kill & Easy-mark
#+BEGIN_SRC emacs-lisp
(use-package easy-kill
  :config
  (global-set-key [remap kill-ring-save] 'easy-kill))

(global-set-key [remap mark-sexp] 'easy-mark)

#+END_SRC
*** Dash at point
#+BEGIN_SRC emacs-lisp
(use-package dash-at-point
  :if (eq system-type 'darwin))

#+END_SRC
*** Diminish
#+BEGIN_SRC emacs-lisp
(diminish 'org-indent-mode)
(diminish 'git-gutter-mode)
(diminish 'Auto-Composition)
(diminish 'Auto-Compression)
(diminish 'Auto-Encryption)
(diminish 'Company-Flx)
(diminish 'Drag-Stuff)
(diminish 'Drag-Stuff-Global)
(diminish 'ivy)
(diminish 'WK)
#+END_SRC
** Webmode
  (use-package web-mode
    :ensure t
    :config
	   (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
	   (add-to-list 'auto-mode-alist '("\\.vue?\\'" . web-mode))
	   (setq web-mode-engines-alist
		 '(("django"    . "\\.html\\'")))
	   (setq web-mode-ac-sources-alist
	   '(("css" . (ac-source-css-property))
	   ("vue" . (ac-source-words-in-buffer ac-source-abbrev))
         ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
(setq web-mode-enable-auto-closing t))
(setq web-mode-enable-auto-quoting t) ; this fixes the quote problem I mentioned
*** Js mode
(use-package js2-mode
:ensure t
:ensure ac-js2
:init
(progn
(add-hook 'js-mode-hook 'js2-minor-mode)
(add-hook 'js2-mode-hook 'ac-js2-mode)
))

(use-package js2-refactor
:ensure t
:config 
(progn
(js2r-add-keybindings-with-prefix "C-c C-m")
;; eg. extract function with `C-c C-m ef`.
(add-hook 'js2-mode-hook #'js2-refactor-mode)))
(use-package tern
:ensure tern
:ensure tern-auto-complete
:config
(progn
(add-hook 'js-mode-hook (lambda () (tern-mode t)))
(add-hook 'js2-mode-hook (lambda () (tern-mode t)))
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
(tern-ac-setup)
))

;;(use-package jade
;;:ensure t
;;)

(use-package nodejs-repl
:ensure t
)

(add-hook 'js-mode-hook
          (lambda ()
            (define-key js-mode-map (kbd "C-x C-e") 'nodejs-repl-send-last-sexp)
            (define-key js-mode-map (kbd "C-c C-r") 'nodejs-repl-send-region)
            (define-key js-mode-map (kbd "C-c C-l") 'nodejs-repl-load-file)
            (define-key js-mode-map (kbd "C-c C-z") 'nodejs-repl-switch-to-repl)))
*** Better shell?
(use-package better-shell
    :ensure t
    :bind (("C-'" . better-shell-shell)
           ("C-;" . better-shell-remote-open)))
(use-package shell-switcher
  :ensure t
  :config 
  (setq shell-switcher-mode t)
  :bind (("C-'" . shell-switcher-switch-buffer)
	   ("C-x 4 '" . shell-switcher-switch-buffer-other-window)
	   ("C-M-'" . shell-switcher-new-shell)))


;; Visual commands
(setq eshell-visual-commands '("vi" "screen" "top" "less" "more" "lynx"
				 "ncftp" "pine" "tin" "trn" "elm" "vim"
				 "nmtui" "alsamixer" "htop" "el" "elinks"
				 ))
(setq eshell-visual-subcommands '(("git" "log" "diff" "show")))
(setq eshell-list-files-after-cd t)
(defun eshell-clear-buffer ()
  "Clear terminal"
  (interactive)
  (let ((inhibit-read-only t))
    (erase-buffer)
    (eshell-send-input)))
(add-hook 'eshell-mode-hook
	    '(lambda()
	       (local-set-key (kbd "C-l") 'eshell-clear-buffer)))

(defun eshell/magit ()
  "Function to open magit-status for the current directory"
  (interactive)
  (magit-status default-directory)
  nil)
*** Eshell prompt
 (defcustom dotemacs-eshell/prompt-git-info
  t
  "Turns on additional git information in the prompt."
  :group 'dotemacs-eshell
  :type 'boolean)

;; (epe-colorize-with-face "abc" 'font-lock-comment-face)
(defmacro epe-colorize-with-face (str face)
  `(propertize ,str 'face ,face))

(defface epe-venv-face
  '((t (:inherit font-lock-comment-face)))
  "Face of python virtual environment info in prompt."
  :group 'epe)

  (setq eshell-prompt-function
      (lambda ()
        (concat (propertize (abbreviate-file-name (eshell/pwd)) 'face 'eshell-prompt)
                (when (and dotemacs-eshell/prompt-git-info
                           (fboundp #'vc-git-branches))
                  (let ((branch (car (vc-git-branches))))
                    (when branch
                      (concat
                       (propertize " [" 'face 'font-lock-keyword-face)
                       (propertize branch 'face 'font-lock-function-name-face)
                       (let* ((status (shell-command-to-string "git status --porcelain"))
                              (parts (split-string status "\n" t " "))
                              (states (mapcar #'string-to-char parts))
                              (added (count-if (lambda (char) (= char ?A)) states))
                              (modified (count-if (lambda (char) (= char ?M)) states))
                              (deleted (count-if (lambda (char) (= char ?D)) states)))
                         (when (> (+ added modified deleted) 0)
                           (propertize (format " +%d ~%d -%d" added modified deleted) 'face 'font-lock-comment-face)))
                       (propertize "]" 'face 'font-lock-keyword-face)))))
                (when (and (boundp #'venv-current-name) venv-current-name)
                  (concat 
                    (epe-colorize-with-face " [" 'epe-venv-face) 
                    (propertize venv-current-name 'face `(:foreground "#2E8B57" :slant italic))
                    (epe-colorize-with-face "]" 'epe-venv-face))) 
                (propertize " $ " 'face 'font-lock-constant-face))))

* Didn't Like
** Org ---- worf mode
(use-package worf
  :defer t
  :init
  (add-hook 'org-mode-hook 'worf-mode))
* Little Functions

** Smarter beginning of line
#+BEGIN_SRC emacs-lisp
(defun smarter-move-beginning-of-line (arg)
  "Move point back to indentation of beginning of line.

Move point to the first non-whitespace character on this line.
If point is already there, move to the beginning of the line.
Effectively toggle between the first non-whitespace character and
the beginning of the line.

If ARG is not nil or 1, move forward ARG - 1 lines first.  If
point reaches the beginning or end of the buffer, stop there."
  (interactive "^p")
  (setq arg (or arg 1))

  ;; Move lines first
  (when (/= arg 1)
    (let ((line-move-visual nil))
      (forward-line (1- arg))))

  (let ((orig-point (point)))
    (back-to-indentation)
    (when (= orig-point (point))
      (move-beginning-of-line 1))))

;; remap C-a to `smarter-move-beginning-of-line'
(global-set-key [remap move-beginning-of-line] 'smarter-move-beginning-of-line)
(global-set-key [remap org-beginning-of-line]  'smarter-move-beginning-of-line)

#+END_SRC
* Minor Modes
** recentf
#+BEGIN_SRC emacs-lisp
(use-package recentf
  :config
  (setq recentf-save-file (expand-file-name "recentf" savefile-dir)
        recentf-max-saved-items 500
        recentf-max-menu-items 15
        ;; disable recentf-cleanup on Emacs start, because it can cause
        ;; problems with remote files
        recentf-auto-cleanup 'never)
  (recentf-mode +1))
#+END_SRC
* Key-Bindings Map
Has to be at end of init file so the functions will be actually defined.
#+BEGIN_SRC emacs lisp
(defvar custom-bindings-map (make-keymap)
  "A keymap for custom bindings.")

(define-key custom-bindings-map (kbd "C-c D") 'define-word-at-point)

(define-key custom-bindings-map (kbd "C->")  'er/expand-region)
(define-key custom-bindings-map (kbd "C-<")  'er/contract-region)

(define-key custom-bindings-map (kbd "C-c e")  'mc/edit-lines)
(define-key custom-bindings-map (kbd "C-c a")  'mc/mark-all-like-this)
(define-key custom-bindings-map (kbd "C-c n")  'mc/mark-next-like-this)

(define-key custom-bindings-map (kbd "C-c m") 'magit-status)

(define-key company-active-map (kbd "C-d") 'company-show-doc-buffer)
(define-key company-active-map (kbd "C-n") 'company-select-next)
(define-key company-active-map (kbd "C-p") 'company-select-previous)
(define-key company-active-map (kbd "<tab>") 'company-complete)

(define-key company-mode-map (kbd "C-:") 'helm-company)
(define-key company-active-map (kbd "C-:") 'helm-company)

;;insert swiper bindings here
;;(define-key custom-bindings-map (kbs "C-s") 'swiper)

;;multiple-cursor-click
(global-set-key (kbd "C-M-<mouse-1>") 'mc/add-cursor-on-click)

(define-key custom-bindings-map (kbd "M-u")         'upcase-dwim)
(define-key custom-bindings-map (kbd "M-c")         'capitalize-dwim)
(define-key custom-bindings-map (kbd "M-l")         'downcase-dwim)
(define-key custom-bindings-map (kbd "M-]")         'other-frame)
(define-key custom-bindings-map (kbd "C-j")         'newline-and-indent)
(define-key custom-bindings-map (kbd "C-c s")       'ispell-word)
(define-key custom-bindings-map (kbd "C-c c")       'org-capture)
(define-key custom-bindings-map (kbd "C-x m")       'mu4e)
(define-key custom-bindings-map (kbd "C-c <up>")    'windmove-up)
(define-key custom-bindings-map (kbd "C-c <down>")  'windmove-down)
(define-key custom-bindings-map (kbd "C-c <left>")  'windmove-left)
(define-key custom-bindings-map (kbd "C-c <right>") 'windmove-right)
(define-key custom-bindings-map (kbd "C-c t")
  (lambda () (interactive) (org-agenda nil "n")))

(define-key global-map          (kbd "M-p")     'jump-to-previous-like-this)
(define-key global-map          (kbd "M-n")     'jump-to-next-like-this)
(define-key custom-bindings-map (kbd "M-,")     'jump-to-previous-like-this)
(define-key custom-bindings-map (kbd "M-.")     'jump-to-next-like-this)
(define-key custom-bindings-map (kbd "C-c .")   (cycle-themes))
(define-key custom-bindings-map (kbd "C-x k")   'kill-this-buffer-unless-scratch)
(define-key custom-bindings-map (kbd "C-c C-0") 'global-scale-default)
(define-key custom-bindings-map (kbd "C-c C-=") 'global-scale-up)
(define-key custom-bindings-map (kbd "C-c C-+") 'global-scale-up)
(define-key custom-bindings-map (kbd "C-c C--") 'global-scale-down)
(define-key custom-bindings-map (kbd "C-x t")   'toggle-shell)
(define-key custom-bindings-map (kbd "C-c j")   'cycle-spacing-delete-newlines)
(define-key custom-bindings-map (kbd "C-c d")   'duplicate-thing)
(define-key custom-bindings-map (kbd "<C-tab>") 'tidy)
(define-key custom-bindings-map (kbd "C-c C-q")
  '(lambda ()
     (interactive)
     (focus-mode 1)
     (focus-read-only-mode 1)))
(with-eval-after-load 'org
  (define-key org-mode-map (kbd "C-'") 'org-sync-pdf))

(define-minor-mode custom-bindings-mode
  "A mode that activates custom-bindings."
  t nil custom-bindings-map)
#+END_SRC
* Fixes
#+BEGIN_SRC 

#+END_SRC
* Sources
https://github.com/larstvei/dot-emacs
https://github.com/bixuanzju/emacs.d/blob/master/emacs-init.org
* Notes
** Make a minor mode
http://nullprogram.com/blog/2013/02/06/
** Org mode links
try out org-mode links http://endlessparentheses.com/use-org-mode-links-for-absolutely-anything.html
** Tips from prelude
http://pragmaticemacs.com/all-posts/
** Themes
https://pawelbx.github.io/emacs-theme-gallery/
** 
